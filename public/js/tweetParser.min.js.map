{"version":3,"sources":["tweetParser.js"],"names":["exports","tweetParser","undefined","extend","generateLink","out","i","arguments","length","key","hasOwnProperty","url","className","target","text","link","document","createElement","href","classList","add","textContent","element","args","elt","querySelectorAll","parameters","urlClass","userClass","hashtagClass","searchWithHashtags","parseUsers","parseHashtags","parseUrls","Array","prototype","forEach","call","el","REGEX_URL","REGEX_USER","REGEX_HASHTAG","tweet","innerHTML","searchlink","replace","outerHTML","user","userOnly","slice","hashtag","hashtagOnly","window","jQuery","$","tweetParserify","options","fn","this","selector"],"mappings":"AAAA;;;;;;;CAWC,SAAUA,GAIP,GAAIC,GAAWC,OAGXC,EAAMD,OACNE,EAAYF,MAEhBC,GAAS,SAAUE,GACfA,EAAMA,KAEN,KAAK,GAAIC,GAAI,EAAGA,EAAIC,UAAUC,OAAQF,GAAK,EACvC,GAAIC,UAAUD,GACV,IAAK,GAAIG,KAAOF,WAAUD,GAClBC,UAAUD,GAAGI,eAAeD,KAC5BJ,EAAII,GAAOF,UAAUD,GAAGG,GAKxC,OAAOJ,IAGXD,EAAe,SAAUO,EAAKC,EAAWC,EAAQC,GAC7C,GAAIC,GAAOC,SAASC,cAAc,IAMlC,OALAF,GAAKG,KAAOP,EACZI,EAAKI,UAAUC,IAAIR,GACnBG,EAAKF,OAASA,EACdE,EAAKM,YAAcP,EAEZC,GAGXd,EAAc,SAAUqB,EAASC,GAC7B,GAAIC,GAAMR,SAASS,iBAAiBH,GAChCI,EAAavB,GACTwB,SAAU,aACVC,UAAW,aACXC,aAAc,UACdhB,OAAQ,SACRiB,oBAAoB,EACpBC,YAAY,EACZC,eAAe,EACfC,WAAW,GACZV,EAEPW,OAAMC,UAAUC,QAAQC,KAAKb,EAAK,SAAAc,GAE9B,GAAMC,GAAY,0DACdC,EAAa,sBACbC,EAAgB,kCAEhBC,EAAQJ,EAAGK,UACXC,EAAU1C,MAKV0C,GAFAlB,EAAWI,mBAEE,+BAGA,gCAIbJ,EAAWO,YACXS,EAAQA,EAAMG,QAAQN,EAAW,SAAU5B,GACvC,GAAII,GAAOX,EAAaO,EAAKe,EAAWC,SAAUD,EAAWb,OAAQF,EAErE,OAAOA,GAAIkC,QAAQlC,EAAKI,EAAK+B,cAKjCpB,EAAWK,aACXW,EAAQA,EAAMG,QAAQL,EAAY,SAAUO,GACxC,GAAIC,GAAWD,EAAKE,MAAM,GACtBtC,EAAG,sBAAyBqC,EAC5BjC,EAAOX,EAAaO,EAAKe,EAAWE,UAAWF,EAAWb,OAAQkC,EAEtE,OAAOA,GAAKF,QAAQE,EAAMhC,EAAK+B,cAKnCpB,EAAWM,gBACXU,EAAQA,EAAMG,QAAQJ,EAAe,SAAUS,GAC3C,GAAIC,GAAcD,EAAQD,MAAM,GAC5BtC,EAAMiC,EAAaO,EACnBpC,EAAOX,EAAaO,EAAKe,EAAWG,aAAcH,EAAWb,OAAQqC,EAEzE,OAAOA,GAAQL,QAAQK,EAASnC,EAAK+B,cAK7CR,EAAGK,UAAYD,KAIvB1C,EAAQC,YAAcA,GACxBmD,QAGEA,OAAOC,SACN,SAAUC,EAAGrD,GAGV,QAASsD,GAAejB,EAAIkB,GACxBvD,EAAYqC,EAAIkB,GAGpBF,EAAEG,GAAGxD,YAAc,SAAUuD,GACzB,MAAOD,GAAeG,KAAKC,SAAUH,KAE3CH,OAAQpD","file":"tweetParser.min.js","sourcesContent":["/*!\n * tweetParser.js v2.2.0\n * Small Javascript Library that parse an element containing a tweet and turn URLS, @user & #hashtags into working urls\n * License : MIT\n * author Vincent Loy <vincent.loy1@gmail.com>\n * http://vincent-loy.fr\n */\n\n/*global window, document*/\n/*jslint regexp: true*/\n\n(function (exports) {\n    'use strict';\n\n    // Class\n    let tweetParser,\n\n    // functions\n        extend,\n        generateLink;\n\n    extend = function (out) {\n        out = out || {};\n\n        for (let i = 1; i < arguments.length; i += 1) {\n            if (arguments[i]) {\n                for (let key in arguments[i]) {\n                    if (arguments[i].hasOwnProperty(key)) {\n                        out[key] = arguments[i][key];\n                    }\n                }\n            }\n        }\n        return out;\n    };\n\n    generateLink = function (url, className, target, text) {\n        let link = document.createElement('a');\n        link.href = url;\n        link.classList.add(className);\n        link.target = target;\n        link.textContent = text;\n\n        return link;\n    };\n\n    tweetParser = function (element, args) {\n        let elt = document.querySelectorAll(element),\n            parameters = extend({\n                urlClass: 'tweet_link',\n                userClass: 'tweet_user',\n                hashtagClass: 'hashtag',\n                target: '_blank',\n                searchWithHashtags: true,\n                parseUsers: true,\n                parseHashtags: true,\n                parseUrls: true\n            }, args);\n\n        Array.prototype.forEach.call(elt, el => {\n\n            const REGEX_URL = /(?:\\s)(f|ht)tps?:\\/\\/([^\\s\\t\\r\\n<]*[^\\s\\t\\r\\n<)*_,\\.])/g, //regex for urls\n                REGEX_USER = /\\B@([a-zA-Z0-9_]+)/g, //regex for @users\n                REGEX_HASHTAG = /\\B(#[á-úÁ-Úä-üÄ-Üa-zA-Z0-9_]+)/g; //regex for #hashtags\n\n            let tweet = el.innerHTML,\n                searchlink; //search link for hashtags\n\n            //Hashtag Search link\n            if (parameters.searchWithHashtags) {\n                //this is the search with hashtag\n                searchlink = \"https://twitter.com/hashtag/\";\n            } else {\n                //this is a more global search including hashtags and the word itself\n                searchlink = \"https://twitter.com/search?q=\";\n            }\n\n            //turn URLS in the tweet into... working urls\n            if (parameters.parseUrls) {\n                tweet = tweet.replace(REGEX_URL, function (url) {\n                    let link = generateLink(url, parameters.urlClass, parameters.target, url);\n\n                    return url.replace(url, link.outerHTML);\n                });\n            }\n\n            //turn @users in the tweet into... working urls\n            if (parameters.parseUsers) {\n                tweet = tweet.replace(REGEX_USER, function (user) {\n                    let userOnly = user.slice(1),\n                        url = `http://twitter.com/${userOnly}`,\n                        link = generateLink(url, parameters.userClass, parameters.target, user);\n\n                    return user.replace(user, link.outerHTML);\n                });\n            }\n\n            //turn #hashtags in the tweet into... working urls\n            if (parameters.parseHashtags) {\n                tweet = tweet.replace(REGEX_HASHTAG, function (hashtag) {\n                    let hashtagOnly = hashtag.slice(1),\n                        url = searchlink + hashtagOnly,\n                        link = generateLink(url, parameters.hashtagClass, parameters.target, hashtag);\n\n                    return hashtag.replace(hashtag, link.outerHTML);\n                });\n            }\n\n            //then, it inject the last var into the element containing the tweet\n            el.innerHTML = tweet;\n        });\n    };\n\n    exports.tweetParser = tweetParser;\n}(window));\n\n/*global $, jQuery, tweetParser*/\nif (window.jQuery) {\n    (function ($, tweetParser) {\n        'use strict';\n\n        function tweetParserify(el, options) {\n            tweetParser(el, options);\n        }\n\n        $.fn.tweetParser = function (options) {\n            return tweetParserify(this.selector, options);\n        };\n    }(jQuery, tweetParser));\n}\n"],"sourceRoot":"/source/"}